{"version":3,"sources":["components/Preloader.js","components/Map.js","components/Header.js","helper/scrollTo.js","components/Podcast.js","components/TravelType.js","components/PodcastDisplay.js","components/AudioPlayer.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Preloader","props","className","styleName","icon","faSpinner","Map","getAddressFromApi","query","axios","url","method","responseType","params","key","format","limit","collection","countryCode","q","setFromState","text","setState","userInputFrom","htmlFrom","setToState","userInputTo","htmlTo","handleUlClick","event","preventDefault","handleClickOutside","target","localName","parentNode","classList","contains","innerText","extractList","result","list","data","results","forEach","address","displayString","handleUserInput","value","length","then","dynamicHtml","state","podcastInput","isFromListExpanded","isToListExpanded","setULRef","bind","document","addEventListener","this","removeEventListener","node","ULRef","id","action","autoComplete","htmlFor","type","name","placeholder","onKeyUp","onChange","onFocus","onClick","onMouseDown","ref","ReactHtmlParser","submitForm","loadMapUrl","isLoadingMap","Component","Header","href","aria-label","goToInput","scrollTo","current","scrollIntoView","behavior","Podcast","handleChange","podcastRef","React","createRef","loadPodcastList","TravelType","handleClick","persist","parentElement","travelType","chooseTravelType","walkTime","cycleTime","PodcastDisplay","showMore","showAll","showLess","podcastList","podcastListRef","prevProps","prevState","isLoadingPodcast","map","podcast","src","thumbnail","alt","title_highlighted","getAudioItem","faHeadphones","title_original","Readmore","charLimit","readMoreText","readLessText","description_original","Math","floor","audio_length_sec","AudioPlayer","audio","Audio","getFormattedTime","timeLeft","hour","mins","seconds","setAudio","newAudio","audioToPlay","isAudioPlaying","toggleButton","progress","audioFile","currentTime","setTimeout","playAudio","showAlert","Swal","fire","title","confirmButtonText","padding","flag","duration","play","callNumber","pauseAudio","pause","togglePlay","scrubAudio","scrubTime","nativeEvent","offsetX","progressBar","offsetWidth","handleProgress","percent","mouseDown","audioPlayerRef","ontimeupdate","selectedAudio","onMouseUp","onMouseMove","style","flexBasis","Footer","aria-hidden","library","add","fab","faWalking","faBiking","faArrowCircleUp","App","goToScroll","inputAddressRef","handleAddressSubmit","fromInput","toInput","start","end","size","routeColor","routeWidth","scalebar","margin","staticMapUrl","request","responseURL","formatedWalkTime","staticMapRef","from","to","routeType","unit","undefined","route","formattedTime","time","showInvalidAddressModal","formatedCycleTime","handlePodcastSubmit","travelTime","minLength","maxLength","headers","dataResponse","language","len_min","len_max","handleChoice","getAudio","toTopRef","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.65adb013.chunk.js","sourcesContent":["import React from \"react\";\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// Preloader component to render the preloading icon\nconst Preloader = (props) => {\n  return (\n    <div className={\"preloader\" + (props.styleName)}>\n      <p>Loading</p>\n        <FontAwesomeIcon icon={faSpinner} className=\"preloader\" />\n    </div>\n  );\n};\n\nexport default Preloader;\n","import React, {Component} from 'react';\nimport axios from 'axios';\nimport ReactHtmlParser from 'react-html-parser';\nimport Preloader from \"./Preloader\";\n\n// Get the user value for starting address and destination with search ahead\nclass Map extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userInputFrom: \"\",\n      userInputTo: \"\",\n      htmlFrom: \"\",\n      htmlTo: \"\",\n      podcastInput: \"\",\n      isFromListExpanded: false,\n      isToListExpanded: false,\n    };\n    this.setULRef = this.setULRef.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n  // To add event listener to listen UL outside click\n  // @params: no-params\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n  // To remove event listener added in DidMount\n  // @params: no-params\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  // Set reference of UL node\n  // @params: node - node to which reference is given\n  setULRef(node) {\n    this.ULRef = node;\n  }\n\n  // If clicked on outside of UL then address list disappears\n  // @params: event - ul outside click event\n  handleClickOutside(event) {\n    if (this.ULRef && !this.ULRef.contains(event.target)) {\n      this.setState({\n        htmlFrom: \"\",\n        htmlTo: \"\",\n      });\n    }\n  }\n  // Promise to search ahead for the user input to generate a list of addresses\n  // @params: query - for which to return suggestions\n  getAddressFromApi = (query)=>{\n      return axios({\n          url:'https://www.mapquestapi.com/search/v3/prediction',\n          method: 'GET',\n          responseType: 'jsonp',\n          params: {\n              key:'TpZYQMsUgBgXUKt2b3xmQCxKpHB7JWoS',\n              format: 'png',\n              limit:'5',\n              collection:'adminArea,address,category,franchise,airport,poi',\n              countryCode:'CA',\n              q:query,\n          }\n      })\n  }\n  // Set the value of starting address\n  // @params: text - starting address\n  setFromState=(text)=>{\n    this.setState({\n      userInputFrom: text,\n      htmlFrom: ``,\n    });\n  }\n  // Set the value of ending address\n  // @params: text - ending address\n  setToState=(text)=>{\n    this.setState({\n      userInputTo: text,\n      htmlTo: ``,\n    });\n  }\n  // Get value from suggestions list on click\n  // @params: event - UL click event or space-bar or enter if user using keyboard\n  handleUlClick = (event) => {\n    event.preventDefault();\n    this.handleClickOutside(event);\n    if (event.target.localName === \"button\" && \n        event.target.parentNode.parentNode.classList.contains(\"fromAddress\")){\n      const text = event.target.parentNode.innerText;\n      this.setFromState(text);\n    }\n    if (event.target.localName === \"li\" && \n        event.target.parentNode.classList.contains(\"fromAddress\")) {\n        const text = event.target.innerText;\n      this.setFromState(text);\n    }\n    if (event.target.localName === \"li\" && \n      event.target.parentNode.classList.contains(\"toAddress\")) {\n      const text = event.target.innerText;\n        this.setToState(text);\n      }\n    if (event.target.localName === \"button\" && \n      event.target.parentNode.parentNode.classList.contains(\"toAddress\")) {\n        const text = event.target.parentNode.innerText;\n        this.setToState(text);\n    }\n  };\n  // Return List from result returned by api\n  // @params: result - returned by search ahead api\n  extractList = (result) => {\n    let list = \"\";\n    if (result && result.data.results) {\n      result.data.results.forEach((address) => {\n        list =\n          list +\n          `<li><button><img src=\"https://assets.mapquestapi.com/icon/v2/marker.png\" alt=\"drop icon\"></img>${address.displayString}</button></li>`;\n      });\n    } else {\n      list = \"\";\n    }\n    return list;\n  };\n  // Get the value from user input and make api calls\n  // @params: event - onChange or onKeyUp\n  handleUserInput = (event) => {\n\n  // For starting address  \n  if (event.target.classList.contains(\"fromInput\")) {\n      if (event.target.value) {\n        this.setState({\n          userInputFrom: event.target.value,\n        });\n        if (event.target.value.length > 1)\n          this.getAddressFromApi(event.target.value).then((result) => {\n            let dynamicHtml = this.extractList(result);\n            this.setState({\n              htmlFrom: dynamicHtml ? dynamicHtml : \"\",\n            });\n          });\n      } else {\n        this.setState({\n          userInputFrom: \"\",\n          htmlFrom: ``,\n        });\n      }\n    }\n\n    // For destination or ending address\n    if (event.target.classList.contains(\"toInput\")) {\n      if (event.target.value) {\n        this.setState({\n          userInputTo: event.target.value,\n        });\n        if (event.target.value.length > 1)\n          this.getAddressFromApi(event.target.value).then((result) => {\n            let dynamicHtml = this.extractList(result);\n            this.setState({\n              htmlTo: dynamicHtml ? dynamicHtml : \"\",\n            });\n          });\n      } else {\n        this.setState({\n          userInputTo: \"\",\n          htmlTo: \"\",\n        });\n      }\n    }\n  };\n  // Render the component on page\n  render() {\n    return (\n      <div className=\"whereTo\" id=\"whereTo\">\n        <div className=\"whereToContainer wrapper\">\n          <h2>Where To Go?</h2>\n          <form\n            action=\"submit\"\n            className=\"searchForm\"\n            autoComplete=\"off\"\n          >\n            <div className=\"addressSearchInput\">\n              <label htmlFor=\"fromaddress\">Starting Location</label>\n              <input\n                type=\"text\"\n                name=\"fromaddress\"\n                className=\"addressSearch fromInput\"\n                placeholder=\"1 Canada's Wonderland Drive, Vaughan, ON L6A 1S6\"\n                value={this.state.userInputFrom}\n                onKeyUp={this.handleUserInput}\n                onChange={this.handleUserInput}\n                onFocus={() => this.setState({ isFromListExpanded: true })}\n              />\n              {this.state.htmlFrom && this.state.isFromListExpanded ? (\n                <ul\n                  className=\"suggestions fromAddress\"\n                  onClick={this.handleUlClick}\n                  onMouseDown={this.handleUlClick}\n                  ref={this.setULRef}\n                >\n                  {ReactHtmlParser(this.state.htmlFrom)}\n                </ul>\n              ) : (\n                \"\"\n              )}\n            </div>\n            <div className=\"addressSearchInput\">\n              <label htmlFor=\"toaddress\">Destination</label>\n              <input\n                type=\"text\"\n                name=\"toaddress\"\n                className=\"addressSearch toInput\"\n                placeholder=\"288 Bremner Blvd, Toronto, ON M5V 3L9\"\n                value={this.state.userInputTo}\n                onKeyUp={this.handleUserInput}\n                onChange={this.handleUserInput}\n                onFocus={() => this.setState({ isToListExpanded: true })}\n              />\n              {this.state.htmlTo && this.state.isToListExpanded ? (\n                <ul\n                  className=\"suggestions toAddress\"\n                  onClick={this.handleUlClick}\n                  onMouseDown={this.handleUlClick}\n                  ref={this.setULRef}\n                >\n                  {ReactHtmlParser(this.state.htmlTo)}\n                </ul>\n              ) : (\n                \"\"\n              )}\n            </div>\n            <button\n              type=\"submit\"\n              onClick={(event) => {\n                this.props.submitForm(\n                  event,\n                  this.state.userInputFrom,\n                  this.state.userInputTo\n                );\n                this.props.loadMapUrl();\n              }}\n            >\n              Search\n            </button>\n          </form>\n          <ol className=\"whereToInstructions\">\n            <h3>Instructions</h3>\n            <li>\n              Type in your starting and desired destination address in the input\n              field.\n            </li>\n            <li>\n              Once you are satisfied with your entries, click search to find out\n              the length of your commute.\n            </li>\n            <li>\n              Next, select your preferred method of travel. We recommend the\n              shorter travel time, but otherwise, it is completely optional.\n            </li>\n          </ol>\n        </div>\n        {this.props.isLoadingMap ? <Preloader styleName=\"WhereTo\" /> : null}\n      </div>\n    );\n  }\n}\n\nexport default Map;","import React, { Component } from 'react';\n// function component to render header on page\nfunction Header(props) {  \n  return (\n    <section className=\"hero wrapper\">\n      <div className=\"whiteBlock\">\n        <h1>Podcast Prioritizer</h1>\n        <div className=\"heroTextContainer\">\n          <p className=\"heroTextTagline\">\n            Say goodbye to dull and boring commutes!\n          </p>\n          <p className=\"heroText\">\n            Podcast Prioritizer will fill your long and uneventful commutes\n            with informative and juicy podcasts for your listening pleasure.\n            Simply enter your starting location, desired destination and\n            topic of interest and we will suggest a lists of podcasts based\n            on the length of your journey.{\" \"}\n            <a\n              href=\"#\"\n              className=\"startLink\"\n              aria-label=\"Click here to proceed to the next section\"\n              onClick={props.goToInput}\n            >\n              &nbsp;Let's Start!\n            </a>\n          </p>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default Header;","// Smooth scroll helper method\nfunction scrollTo(ref){\n    ref.current.scrollIntoView({ behavior: 'smooth' });\n}\n\nexport default scrollTo;\n","import React, { Component } from \"react\";\nimport scrollTo from '../helper/scrollTo';\n// Component to search for podcast\nclass Podcast extends Component {\n  constructor() {\n    super();\n    this.state = {\n        podcastInput: \"\"\n    }\n    this.podcastRef = React.createRef();\n  }\n  // On mounting scroll to Podcast list returned\n  // @params: no-params\n  componentDidMount(){\n    scrollTo(this.podcastRef);\n  }\n  // On Updating component scroll to Podcast list returned\n  // @params: no-params\n  componentDidUpdate(){\n    scrollTo(this.podcastRef);\n  }\n  // When user enter a new item\n  // @params: event - onChange \n  handleChange=(event)=>{\n    this.setState({\n      podcastInput:event.target.value\n    })\n  }\n\n  // Render the component on page\n  render() {\n      // user podcast selection form\n      return (\n        <section className=\"whatToListen\">\n          <div className=\"whatToListenContainer wrapper\">\n            <form className=\"searchForm podcastSearchForm\">\n            <h2 ref={this.podcastRef} className=\"podcastSearchHeader\">What to Listen?</h2>\n            <div className=\"podcastSearchInput\">\n              <label htmlFor=\"podcast\"></label>\n              <input\n                placeholder=\"Your topic of interest (e.g. finance, pets, health)\"\n                className=\"podcastSearch\"\n                type=\"text\"\n                id=\"podcast\"\n                value={this.state.podcastInput}\n                onChange={this.handleChange}\n              />\n              <button\n                type=\"submit\"\n                onClick={(event) => {\n                  this.props.submitForm(event, this.state.podcastInput);\n                  this.props.loadPodcastList();\n                }}\n              >\n                Search\n              </button>\n            </div>\n          </form>\n          <ol className=\"whatToListenInstructions\">\n            <h3>Instructions</h3>\n            <li>\n              Type your topic of interest into the input field above and\n              click search once you are ready.\n            </li>\n            <li>\n              Afterwards, you will be automatically directed to a list of curated\n              podcasts based on your chosen topic and the length of\n              your commute.\n            </li>\n            <li>\n              Click the listen button to hear a podcast. Happy listening!\n            </li>\n          </ol>\n          </div>\n        </section>\n      );\n  }\n}\n\nexport default Podcast;\n","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n// Component to ask user to select travel type\nclass TravelType extends Component {\n  constructor() {\n    super();\n    this.state = {\n      travelType: \"walk\",\n    };\n  }\n  // Handle when user click on different option\n  // @params: event - onClick\n  handleClick = (event) => {\n    event.persist();\n    const id =\n      event.target.id ||\n      event.target.parentElement.id ||\n      event.target.parentElement.parentElement.id;\n    this.setState({\n      travelType: id,\n    });\n    this.props.chooseTravelType(id);\n  };\n  // Render the component on page\n  render() {\n    return (\n      <section className=\"travelTypeSection\">\n        <div className=\"travelTypeSelection wrapper\">\n          <h2 className=\"travelHeading\">Travel Preference?</h2>\n          <p className=\"travelTypeText\">\n            We suggest the faster route, but please pick whatever option suits\n            you best.\n          </p>\n          <p className=\"travelTypeText\">\n            Warning: Biking with headphones on is{\" \"}\n            <span className=\"emphasisText\">not</span> suggested.\n          </p>\n          <p className=\"travelTypeText\">\n            Please be safe when listening to audio while cycling.\n          </p>\n          <div className=\"travelTypeButtonContainer\">\n            <button\n              id=\"walk\"\n              onClick={this.handleClick}\n              className={\n                this.state.travelType === \"walk\" ? \"active\" : \"inactive\"\n              }\n            >\n              <FontAwesomeIcon\n                icon=\"walking\"\n                className=\"icon\"\n              ></FontAwesomeIcon>\n              <p>{`your walking travel time is ${this.props.walkTime} hour(s)`}</p>\n            </button>\n            <button\n              id=\"cycle\"\n              onClick={this.handleClick}\n              className={\n                this.state.travelType === \"cycle\" ? \"active\" : \"inactive\"\n              }\n            >\n              <FontAwesomeIcon icon=\"biking\" className=\"icon\"></FontAwesomeIcon>\n              <p>{`your cycling travel time is ${this.props.cycleTime} hour(s)`}</p>\n            </button>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\nexport default TravelType;\n","import React, { Component } from \"react\";\nimport ReadMoreAndLess from \"react-read-more-less\";\nimport { faHeadphones } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Preloader from \"./Preloader\";\nimport scrollTo from '../helper/scrollTo';\n// Component to display the podcast list on page\nclass PodcastDisplay extends Component {\n  constructor() {\n    super();\n    this.state = {\n      podcastList: []\n    }\n    this.podcastListRef = React.createRef();\n  }\n  // Methods to set state for Read more or less\n  // @params: no-params\n  showMore = () => this.setState({ showAll: true });\n  showLess = () => this.setState({ showAll: false });\n  // Update podcastList and scroll to it on update\n  // @params: pervProps - Previous Props, prevState - previous State\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.podcastList !== prevState.podcastList) {\n      this.setState({\n        podcastList: this.props.podcastList\n      })\n      scrollTo(this.podcastListRef);\n    }\n  }\n  // Scroll to list on mounting\n  // @params: no-params\n  componentDidMount() {\n    this.setState({\n      podcastList: this.props.podcastList\n    })\n    scrollTo(this.podcastListRef);\n  }\n  \n  // Render the component on page\n  render() {\n    return (\n      <section className=\"podcastDisplay\">\n        <div className=\"wrapper\">\n          <h2 ref={this.podcastListRef} className=\"podcastHeader\">Pick Your Podcast</h2>\n          {this.props.isLoadingPodcast ? <Preloader styleName=\"PodcastDisplay\"/> : null}\n          {this.props.isLoadingPodcast ? null : (\n            <ul className=\"podcastGrid \">\n              {this.props.podcastList.map((podcast) => {\n                return (\n                  <li className=\"podcastList\" key={podcast.id}>\n                    <div className=\"podcastImgContainer\">\n                      <img\n                        src={podcast.thumbnail}\n                        alt={podcast.title_highlighted}\n                        className=\"podcastImg\"\n                      />\n                      <button\n                        className=\"audioButton\"\n                        onClick={() => this.props.getAudioItem(podcast)}\n                      >\n                        <FontAwesomeIcon icon={faHeadphones} />\n                        &nbsp;Listen\n                      </button>\n                    </div>\n                    <div className=\"podcastInfo\">\n                      <h3>{podcast.title_original}</h3>\n                      <ReadMoreAndLess\n                        ref={this.Readmore}\n                        charLimit={200}\n                        readMoreText=\"Read More\"\n                        readLessText=\"&nbsp;Read Less\"\n                      >\n                        {podcast.description_original}\n                      </ReadMoreAndLess>\n                      <p className=\"podcastLength\">\n                        Length: {Math.floor(podcast.audio_length_sec / 60)}{\" \"}\n                        minutes\n                      </p>\n                    </div>\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default PodcastDisplay;\n","import React, { Component } from \"react\";\nimport Swal from \"sweetalert2\";\nimport scrollTo from '../helper/scrollTo';\n// Component that receives the audio file and plays it\nclass AudioPlayer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            isAudioPlaying: false,\n            toggleButton: \"▶️\",\n            progress: \"\",\n            timeLeft: \"00:00\",\n            mouseDown: false,\n            audioFile: \"\",\n            callNumber:0\n        };\n        this.progressBar = React.createRef();\n        this.audioPlayerRef = React.createRef();    \n    }\n    // thank you Salvatore @ stackoverflow.com (https://stackoverflow.com/questions/39779527/toggle-play-pause-in-react-with-audio)\n    // Declare global audio file\n    audio = new Audio();\n    // On update update the audio file and scroll to player\n    // @params: prevProps - previous Props, prevState - Previous State\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.audioToPlay.audio !== prevState.audioFile) {\n            this.setAudio();\n            scrollTo(this.audioPlayerRef);\n        }\n    }\n    // Set initial state on component mounting\n    componentDidMount() {\n        this.setState({\n            isAudioPlaying: false,\n            toggleButton: '▶️'\n        })\n        this.audio.src = this.props.audioToPlay.audio;\n        this.audio.ontimeupdate = this.handleProgress;\n        setTimeout(this.playAudio, 1000);\n        scrollTo(this.audioPlayerRef);\n    }\n    // Helper method to return the time in 00:00:00 format from seconds\n    // @params: timeLeft - time in seconds\n    getFormattedTime = (timeLeft) => {\n        const hour = Math.floor(timeLeft / (60 * 60));\n        let mins = Math.floor(timeLeft / 60) % 60;\n        let seconds = timeLeft % 60;\n        mins = mins < 10 && mins >= 0 ? \"0\" + mins : mins;\n        seconds = seconds < 10 && seconds >= 0 ? \"0\" + seconds : seconds;\n        timeLeft = hour ? `${hour}:${mins}:${seconds}` : `${mins}:${seconds}`;\n        return timeLeft;\n    };\n    // Set the audio to new audio on component update or initial\n    // @params: no-params\n    setAudio = () => {\n        const newAudio = this.props.audioToPlay;\n        this.setState({\n            isAudioPlaying: false,\n            toggleButton: '▶️',\n            progress: '0',\n            audioFile: newAudio.audio,\n            timeLeft: this.getFormattedTime(newAudio.audio_length_sec)\n        })\n        this.audio.src = newAudio.audio;\n        this.audio.currentTime = 0;\n        setTimeout(this.playAudio,1000);\n    }\n    // Message to show on wrong audio file\n    // @params: no-params\n    showAlert = ()=>{\n        Swal.fire({\n            title: \"Uh-oh!\",\n            text: \"This audio is not available at the moment. Please select another podcast!\",\n            confirmButtonText: \"OK\",\n            padding: \"2rem\",\n        });\n    }\n    // Play the audio file if exists\n    // @params: no-params, uses global audio variable\n    playAudio = () => {\n        let flag = false;\n        if(!this.audio.duration){\n            if(!this.state.callNumber){\n                setTimeout(()=>{\n                        this.playAudio();\n                        this.setState({callNumber:1})}\n                    ,2000);\n            }else{\n                flag = true;\n            }\n        }\n        else{\n            this.setState({\n                isAudioPlaying: true,\n                toggleButton: '❚ ❚',\n            });\n            this.audio.play();\n        }\n        if(flag)this.showAlert();\n    };\n    // Pause the audio file if playing\n    // @params: no-params, uses global audio variable\n    pauseAudio = () => {\n        this.setState({\n            isAudioPlaying: false,\n            toggleButton: '▶️'\n        });\n        this.audio.pause();\n    };\n    // Play file if paused or vice-versa\n    // @params: no-params\n    togglePlay = () => {\n        if (this.state.isAudioPlaying) { this.pauseAudio() }\n        else { this.playAudio(); }\n    }\n    // Scrub audio file to go to where user click on audio progress\n    // @params: event - mouse move event on progress bar\n    scrubAudio = (event) => {\n        event.persist();\n        const scrubTime = (event.nativeEvent.offsetX / this.progressBar.current.offsetWidth) * this.audio.duration;\n        this.audio.currentTime = scrubTime;\n    }\n    // Handles the progress bar while audio is playing\n    // @params: no-params\n    handleProgress = () => {\n        const percent = (this.audio.currentTime / this.audio.duration) * 100;\n        let timeLeft = Math.floor(this.audio.duration - this.audio.currentTime);\n        timeLeft = this.getFormattedTime(timeLeft);\n        if (percent) {\n            this.setState({\n                timeLeft: timeLeft,\n                progress: `${percent}`\n            })\n        }\n    }\n    // Method to render the component on page\n    render() {\n        const selectedAudio = this.props.audioToPlay;\n        return (\n            <div className=\"wrapper audioWrapper\">\n                <h2 className=\"audioHeader\">Your Podcast</h2>\n                <div className=\"playerThumbnail\">\n                    <img \n                    src={selectedAudio.thumbnail} \n                    alt={selectedAudio.title} />\n                </div>\n                <div ref={this.audioPlayerRef} className=\"audioControl\">\n                    <button\n                        className=\"playerButton toggle\" title=\"Toggle Play\"\n                        onClick={() => this.togglePlay()}>{this.state.toggleButton}\n                    </button>\n                    <div className=\"progress\"\n                        ref={this.progressBar}\n                        onMouseDown={() => this.setState({ mouseDown: true })}\n                        onMouseUp={() => this.setState({ mouseDown: false })}\n                        onMouseMove={(event) => this.state.mouseDown && this.scrubAudio(event)}\n                    >\n                        <div className=\"progressFilled\" style={{ flexBasis: `${this.state.progress}%` }}></div>\n                    </div>\n                    <p className=\"timeLeft\">{this.state.timeLeft}</p>\n                </div>\n            </div>\n        )\n    }\n};\nexport default AudioPlayer;\n","import React from \"react\";\n// Function component to render footer on page\nconst Footer = () => {\n  return (\n    <footer>\n      <div className=\"wrapper\">\n        <p>\n          Copyright <span aria-hidden=\"true\">&copy;</span> 2020 by Anna Liang,\n          Ranjodh Singh and Mahsa Ashtari\n        </p>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport axios from \"axios\";\nimport Map from \"./components/Map\";\nimport Header from \"./components/Header\";\nimport Podcast from \"./components/Podcast\";\nimport TravelType from \"./components/TravelType\";\nimport PodcastDisplay from \"./components/PodcastDisplay\";\nimport AudioPlayer from \"./components/AudioPlayer\";\nimport Footer from \"./components/Footer\";\nimport Swal from \"sweetalert2\";\nimport scrollTo from './helper/scrollTo';\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport { faWalking, faBiking, faArrowCircleUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nlibrary.add(fab, faWalking, faBiking, faArrowCircleUp);\n\n// Main component container App\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      staticMapUrl: \"\",\n      formatedWalkTime: \"\",\n      formatedCycleTime: \"\",\n      walkTime: \"\",\n      cycleTime: \"\",\n      podcastList: [],\n      travelType: \"walk\",\n      audio: \"\",\n      isLoadingMap: false,\n      isLoadingPodcast: false,\n    };\n    this.staticMapRef = React.createRef();\n    this.inputAddressRef = React.createRef();\n    this.toTopRef = React.createRef();\n  }\n  \n  // This method is used as helper to scroll when called from Header.js\n  // @param: event - on which event it gets called - click here\n  goToScroll=(event)=>{\n    event.preventDefault();\n    scrollTo(this.inputAddressRef);\n  }\n  // This method is used to make api calls to get static map for given input\n  // @params: event - search button click,fromInput - starting address, toInput - destination address \n  handleAddressSubmit = (event, fromInput, toInput) => {\n    event.preventDefault();\n    axios({\n      url: \"https://www.mapquestapi.com/staticmap/v5/map\",\n      method: \"GET\",\n      responseType: \"json\",\n      params: {\n        key: \"TpZYQMsUgBgXUKt2b3xmQCxKpHB7JWoS\",\n        format: \"png\",\n        start: fromInput,\n        end: toInput,\n        size: \"500,200@2x\",\n        countryCode: \"CA\",\n        routeColor: \"F97068\",\n        routeWidth: 5,\n        scalebar: true,\n        margin: 40,\n      },\n    }).then((result) => {\n      this.setState(\n        {\n          staticMapUrl: result.request.responseURL,\n          isLoadingMap: false,\n        },\n        () => {\n          if (this.state.staticMapUrl && this.state.formatedWalkTime !== \"\") {\n            setTimeout(() => scrollTo(this.staticMapRef), 0);\n          }\n        }\n      );\n    });\n\n    // If user enters valid address then Make another axios call to get the pedestrian and bicycle travel time\n    if (fromInput !== \"\" && toInput !== \"\") {\n      axios({\n        method: \"GET\",\n        url: \"https://www.mapquestapi.com/directions/v2/route\",\n        params: {\n          key: \"TpZYQMsUgBgXUKt2b3xmQCxKpHB7JWoS\",\n          from: fromInput,\n          to: toInput,\n          countryCode: \"CA\",\n          routeType: \"pedestrian\",\n          unit: \"k\",\n        },\n      }).then((result) => {\n        if (\n          result.data.route.formattedTime !== undefined &&\n          result.data.route.time !== undefined &&\n          result.data.route.formattedTime !== \"00:00:00\" &&\n          result.data.route.time !== \"00:00:00\"\n        ) {\n          this.setState({\n            formatedWalkTime: result.data.route.formattedTime,\n            walkTime: result.data.route.time,\n          });\n        } else {\n          this.showInvalidAddressModal();\n        }\n      });\n    }\n\n    axios({\n      method: \"GET\",\n      url: \"https://www.mapquestapi.com/directions/v2/route\",\n      params: {\n        key: \"TpZYQMsUgBgXUKt2b3xmQCxKpHB7JWoS\",\n        from: fromInput,\n        to: toInput,\n        countryCode: \"CA\",\n        routeType: \"bicycle\",\n        unit: \"k\",\n      },\n    }).then((result) => {\n      if (\n        result.data.route.formattedTime !== undefined &&\n        result.data.route.time !== undefined &&\n        result.data.route.formattedTime !== \"00:00:00\" &&\n        result.data.route.time !== \"00:00:00\"\n      ) {\n        this.setState({\n          formatedCycleTime: result.data.route.formattedTime,\n          cycleTime: result.data.route.time,\n        });\n      } else {\n        this.showInvalidAddressModal();\n      }\n    });\n  };\n\n  // Modal to show error if the user enter invalid address\n  // @params: no-params\n  showInvalidAddressModal = () => {\n    Swal.fire({\n      title: \"Uh-oh!\",\n      text:\n        \"You must enter in a valid starting and destination address if you wish to proceed.\",\n      confirmButtonText: \"OK\",\n      padding: \"2rem\",\n    });\n    this.setState({\n      isLoadingMap: false,\n    });\n  };\n\n  // Set State for loading map image\n  // @params: no-params\n  loadMapUrl = () => {\n    this.setState({\n      isLoadingMap: true,\n    });\n  };\n  // Set state for loading podcast list\n  // @params: no-params\n  loadPodcastList = () => {\n    this.setState({\n      isLoadingPodcast: true,\n    });\n  };\n  // Method to get user input to search podcast List\n  // @params: event - search click event, podcastInput - user entered value\n  handlePodcastSubmit = (event, podcastInput) => {\n    event.preventDefault();\n    let travelTime = 0;\n    if (this.state.travelType === \"walk\") {\n      travelTime = Math.floor(this.state.walkTime / 60);\n    } else if (this.state.travelType === \"cycle\") {\n      travelTime = Math.floor(this.state.cycleTime / 60);\n    }\n\n    const minLength = travelTime - 5;\n    const maxLength = travelTime + 5;\n    // Make axios call to get the podcast list\n    if (this.state.walkTime !== \"\" && this.state.travelType !== \"\") {\n      axios({\n        url: \"https://listen-api.listennotes.com/api/v2/search\",\n        method: \"GET\",\n        headers: { \"X-ListenAPI-Key\": \"0be4947c18024c2d8a5bb0dcb11eb2ac\" },\n        dataResponse: \"jsonp\",\n        params: {\n          q: `\"${podcastInput}\"`,\n          type: \"episode\",\n          language: \"English\",\n          len_min: minLength,\n          len_max: maxLength,\n        },\n      }).then((result) => {\n        if (result.data.results.length === 0) {\n          Swal.fire({\n            title: \"Uh-oh!\",\n            text:\n              \"Sorry, there are no podcasts that match your search criteria. Please choose another topic!\",\n            confirmButtonText: \"OK\",\n            padding: \"2rem\",\n          });\n          this.setState({\n            podcastList: result.data.results,\n            isLoadingPodcast: false,\n          });\n        } else {\n          this.setState({\n            podcastList: result.data.results,\n            isLoadingPodcast: false,\n          });\n        }\n      });\n    } else {\n      Swal.fire({\n        title: \"Uh-oh!\",\n        text: \"Please select a travel preference first before proceeding.\",\n        confirmButtonText: \"OK\",\n        padding: \"2rem\",\n      });\n    }\n  };\n  // Set the travel type when user select different option\n  // @params: id - \"walk\" or \"cycle\"\n  handleChoice = (id) => {\n    this.setState({\n      travelType: id,\n    });\n  };\n  // Set state for user selected audio\n  // @params: selectedAudio - audio selected when user clicks Listen button\n  getAudio = (selectedAudio) => {\n    this.setState({\n      audio: selectedAudio,\n    });\n  };\n  // Method to render component to the page \n  render() {\n\n    return (\n      <div className=\"App\">\n        <header ref={this.toTopRef}>\n          <Header goToInput={this.goToScroll}/>\n        </header>\n        <section ref={this.inputAddressRef}>\n          <Map \n            submitForm={this.handleAddressSubmit}\n            isLoadingMap={this.state.isLoadingMap}\n            loadMapUrl={this.loadMapUrl}\n          />\n        </section>\n        {this.state.staticMapUrl &&\n        this.state.formatedWalkTime !== \"\" &&\n        !this.state.isLoadingMap ? (\n          <section className=\"routeMap\" id=\"routeMap\">\n            <div className=\"routeMapContainer wrapper\">\n              <h2 ref={this.staticMapRef} className=\"routeMapHeader\">\n                Your Travel Route\n              </h2>\n              <p>Map overview of your commute.</p>\n              <p>\n                Please scroll to the next section to pick your travel\n                preference.\n              </p>\n              <img\n                src={this.state.staticMapUrl}\n                className=\"routeMapImg\"\n                alt=\"Route on map\"\n              />\n            </div>\n          </section>\n        ) : null}\n        {this.state.formatedWalkTime !== \"\" && !this.state.isLoadingMap ? (\n          <TravelType\n            walkTime={this.state.formatedWalkTime}\n            cycleTime={this.state.formatedCycleTime}\n            chooseTravelType={this.handleChoice}\n          ></TravelType>\n        ) : null}\n        {this.state.staticMapUrl &&\n        this.state.formatedWalkTime !== \"\" &&\n        !this.state.isLoadingMap ? (\n          <Podcast\n            submitForm={this.handlePodcastSubmit}\n            isLoadingPodcast={this.state.isLoadingPodcast}\n            loadPodcastList={this.loadPodcastList}\n          />\n        ) : null}\n        {this.state.podcastList.length !== 0 &&\n        !this.state.isLoadingMap &&\n        !this.state.isLoadingMap ? (\n          <section>\n            <PodcastDisplay\n              podcastList={this.state.podcastList}\n              getAudioItem={this.getAudio}\n              isLoadingPodcast={this.state.isLoadingPodcast}\n            />\n          </section>\n        ) : null}\n        {this.state.audio !== \"\" ? (\n          <section className=\"audioPlayer\">\n            {this.state.audio ? (\n              <AudioPlayer audioToPlay={this.state.audio} />\n            ) : (\n              \"\"\n            )}\n          </section>\n        ) : null}\n        <button className=\"toTop\"\n          onClick={()=>scrollTo(this.toTopRef)}\n          >\n          <FontAwesomeIcon\n            icon=\"arrow-circle-up\"\n            className=\"icon\"\n          ></FontAwesomeIcon>\n        </button>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}